/*
 * generated by Xtext 2.25.0
 */
package com.se4gd.smartfarming.serializer;

import com.google.inject.Inject;
import com.se4gd.smartfarming.services.SmartFarmingGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import smartFarmingXText.Actuator;
import smartFarmingXText.AnalyticsSystem;
import smartFarmingXText.CommunicationProtocol;
import smartFarmingXText.Controlling;
import smartFarmingXText.Crop;
import smartFarmingXText.Farm;
import smartFarmingXText.Farmer;
import smartFarmingXText.Gateway;
import smartFarmingXText.IoTSystem;
import smartFarmingXText.Monitoring;
import smartFarmingXText.Sensor;
import smartFarmingXText.SmartFarmingXTextPackage;

@SuppressWarnings("all")
public class SmartFarmingSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SmartFarmingGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SmartFarmingXTextPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SmartFarmingXTextPackage.ACTUATOR:
				sequence_Actuator(context, (Actuator) semanticObject); 
				return; 
			case SmartFarmingXTextPackage.ANALYTICS_SYSTEM:
				sequence_AnalyticsSystem(context, (AnalyticsSystem) semanticObject); 
				return; 
			case SmartFarmingXTextPackage.COMMUNICATION_PROTOCOL:
				sequence_CommunicationProtocol(context, (CommunicationProtocol) semanticObject); 
				return; 
			case SmartFarmingXTextPackage.CONTROLLING:
				sequence_Controlling(context, (Controlling) semanticObject); 
				return; 
			case SmartFarmingXTextPackage.CROP:
				sequence_Crop(context, (Crop) semanticObject); 
				return; 
			case SmartFarmingXTextPackage.FARM:
				sequence_Farm(context, (Farm) semanticObject); 
				return; 
			case SmartFarmingXTextPackage.FARMER:
				sequence_Farmer(context, (Farmer) semanticObject); 
				return; 
			case SmartFarmingXTextPackage.GATEWAY:
				sequence_Gateway(context, (Gateway) semanticObject); 
				return; 
			case SmartFarmingXTextPackage.IO_TSYSTEM:
				sequence_IoTSystem(context, (IoTSystem) semanticObject); 
				return; 
			case SmartFarmingXTextPackage.MONITORING:
				sequence_Monitoring(context, (Monitoring) semanticObject); 
				return; 
			case SmartFarmingXTextPackage.SENSOR:
				sequence_Sensor(context, (Sensor) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Device returns Actuator
	 *     Actuator returns Actuator
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         DeviceID=EString? 
	 *         IPAddress=EString? 
	 *         Manufacturer=EString? 
	 *         Type=ActuatorType? 
	 *         Protocol=[CommunicationProtocol|EString]
	 *     )
	 */
	protected void sequence_Actuator(ISerializationContext context, Actuator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Service returns AnalyticsSystem
	 *     AnalyticsSystem returns AnalyticsSystem
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         ServiceID=EString? 
	 *         Host=EString? 
	 *         URI=EString? 
	 *         AnalyticsType=AnalyticsType? 
	 *         DataSource=EString? 
	 *         OutputType=OutputType?
	 *     )
	 */
	protected void sequence_AnalyticsSystem(ISerializationContext context, AnalyticsSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CommunicationProtocol returns CommunicationProtocol
	 *
	 * Constraint:
	 *     (name=EString Type=CommunicationType?)
	 */
	protected void sequence_CommunicationProtocol(ISerializationContext context, CommunicationProtocol semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Service returns Controlling
	 *     Controlling returns Controlling
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         ServiceID=EString? 
	 *         Host=EString? 
	 *         URI=EString? 
	 *         ControlType=ControlType? 
	 *         Action=ControllerAction? 
	 *         Actuators+=[Actuator|EString] 
	 *         Actuators+=[Actuator|EString]*
	 *     )
	 */
	protected void sequence_Controlling(ISerializationContext context, Controlling semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Crop returns Crop
	 *
	 * Constraint:
	 *     (name=EString CropGroup=CropGroup? GrowthDuration=EInt SeedCode=EString?)
	 */
	protected void sequence_Crop(ISerializationContext context, Crop semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Farm returns Farm
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         Location=EString? 
	 *         Size=EFloat 
	 *         Crops+=Crop 
	 *         Crops+=Crop* 
	 *         Farmers+=Farmer 
	 *         Farmers+=Farmer* 
	 *         IoTSystem=IoTSystem
	 *     )
	 */
	protected void sequence_Farm(ISerializationContext context, Farm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Farmer returns Farmer
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         FarmerID=EString? 
	 *         Email=EString? 
	 *         PhoneNumber=EString? 
	 *         Services+=[Service|EString] 
	 *         Services+=[Service|EString]*
	 *     )
	 */
	protected void sequence_Farmer(ISerializationContext context, Farmer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Gateway returns Gateway
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         GatewayID=EString? 
	 *         Model=EString? 
	 *         Devices+=[Device|EString] 
	 *         Devices+=[Device|EString]* 
	 *         Protocols+=CommunicationProtocol 
	 *         Protocols+=CommunicationProtocol*
	 *     )
	 */
	protected void sequence_Gateway(ISerializationContext context, Gateway semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IoTSystem returns IoTSystem
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         Version=EString? 
	 *         Services+=Service 
	 *         Services+=Service* 
	 *         Devices+=Device 
	 *         Devices+=Device* 
	 *         Gateways+=Gateway 
	 *         Gateways+=Gateway*
	 *     )
	 */
	protected void sequence_IoTSystem(ISerializationContext context, IoTSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Service returns Monitoring
	 *     Monitoring returns Monitoring
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         ServiceID=EString? 
	 *         Host=EString? 
	 *         URI=EString? 
	 *         Metrics=MonitoringMetrics? 
	 *         Sensors+=[Sensor|EString] 
	 *         Sensors+=[Sensor|EString]* 
	 *         Control=[Controlling|EString]?
	 *     )
	 */
	protected void sequence_Monitoring(ISerializationContext context, Monitoring semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Device returns Sensor
	 *     Sensor returns Sensor
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         DeviceID=EString? 
	 *         IPAddress=EString? 
	 *         Manufacturer=EString? 
	 *         Type=SensorType? 
	 *         State=SensorState? 
	 *         Unit=EString? 
	 *         Value=EFloat 
	 *         Protocol=[CommunicationProtocol|EString]
	 *     )
	 */
	protected void sequence_Sensor(ISerializationContext context, Sensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
